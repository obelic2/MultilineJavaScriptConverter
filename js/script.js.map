{"version":3,"sources":["script.js"],"names":[],"mappings":"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","file":"script.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n// Constant variables\nconst NEW_LINE = \"\\n\";\nconst TAB = \"\\t\";\nconst LINE_START = `${TAB}+ `;\nconst STRING_NEW_LINE = \"\\\\n\";\nconst FINAL_SEMI_COLON = \";\";\nconst ESCAPE_CHARACTER = \"\\\\\";\n\n// Special characters\nconst DOUBLE_QUOTE = `\"`;\nconst SINGLE_QUOTE = `'`;\nconst BACKTICK = `\\``;\n\n// Escaped special characters\nconst ESCAPED_DOUBLE_QUOTE = \"\\\\\\\"\";\nconst ESCAPED_SINGLE_QUOTE = '\\\\\\'';\nconst ESCAPED_BACKTICK = `\\\\\\``;\n\n// Types\nconst ECMA6 = \"ecma6\";\nconst ECMA5_SINGLE = \"ecma5single\";\nconst ECMA5_DOUBLE = \"ecma5double\";\n\n// Defaults\nconst DEFAULT_STRING_TYPE = ECMA5_DOUBLE;\nconst DEFAULT_VARIABLE_NAME = \"text\";\n\n// Escape any backslashes\nlet escapeBackslash = value => {\n  return value.replace(/\\\\/g, \"\\\\\\\\\");\n};\n\n// Escape any special characters that will effect Javascript\nlet escapeSpecialCharacters = (line, stringType) => {\n  let value = escapeBackslash(line);\n\n  if (stringType === ECMA5_DOUBLE){\n    // Escape double quotes\n    value = value.replace(/\"/g, ESCAPED_DOUBLE_QUOTE);\n  } else if (stringType === ECMA5_SINGLE){\n    // Escape single quotes\n    value = value.replace(/'/g, ESCAPED_SINGLE_QUOTE);\n  } else {\n    // Escape backtick quotes\n    value = value.replace(/`/g, ESCAPED_BACKTICK);\n  }\n\n  return value;\n};\n\n// Return the type of quote based on string type and if it is the end/start\nlet quote = (stringType, wrapper = false) => {\n  if (stringType === ECMA5_DOUBLE){\n    return DOUBLE_QUOTE;\n  } else if (stringType === ECMA5_SINGLE){\n    return SINGLE_QUOTE;\n  } else if (stringType === ECMA6 && wrapper){\n    return BACKTICK;\n  } else if (stringType === ECMA6){\n    return \"\";\n  } else {\n    return SINGLE_QUOTE;\n  }\n};\n\n// Initialize the variable line\nlet initVariable = (variableName, stringType) => {\n  let buffer = \"\";\n\n  if (variableName && variableName.length){\n    // Variable name\n    if (stringType === ECMA6){\n      buffer += \"const \";\n    } else {\n      buffer += \"var \";  \n    }\n    \n    buffer += variableName;\n    buffer += \" = \";\n  }\n  \n  return buffer;\n};\n\n// Get first line\nlet getStart = (stringType, variableName) => {\n  let buffer = \"\";\n\n  if (variableName && variableName.length){\n    if (stringType === ECMA6){\n      buffer += `const ${variableName} = `;\n    } else {\n      buffer += `var ${variableName} = `;\n    }\n  } else {\n    buffer += TAB;\n  }\n\n  buffer += quote(stringType, true);\n\n  return buffer;\n};\n\n// Get end of line\nlet getEnd = (stringType, semiColon = true) => {\n  let buffer = quote(stringType, true);\n\n  if (semiColon){\n    buffer += FINAL_SEMI_COLON;\n  }\n\n  return buffer;\n};\n\n// Convert text to JavaScript Variable\nlet convertText = (variableName, contents, stringType, newlines, trim, semiColon) => {\n  // Output buffer\n  let buffer = getStart(stringType, variableName);\n\n  const lineContents = contents.split(NEW_LINE);\n\n  lineContents.forEach((value, count) => {\n\n    if (trim){\n      value = value.trim();\n    }\n\n    if (!newlines && ((!value || !value.length) || (value === NEW_LINE))){\n      return;\n    }\n\n    buffer += escapeSpecialCharacters(value, stringType);\n\n    if (lineContents.length - 1 !== count){\n      buffer += quote(stringType);\n\n      if (stringType !== ECMA6){\n        buffer += `${NEW_LINE}${LINE_START}${quote(stringType)}`;\n      } else {\n        buffer += NEW_LINE;\n      }\n    }\n  });\n  \n  buffer += getEnd(stringType, semiColon);\n\n  return buffer;\n};\n\n// Clear the field with empty string unless a default selection is provided\nlet clearField = (field, defaultSelection = \"\") => {\n  field.value = defaultSelection !== null && defaultSelection.toString ? defaultSelection.toString() : \"\";\n};\n\n// Export so it can be required\nmodule.exports = {\n  // Constants\n  DEFAULT_STRING_TYPE: DEFAULT_STRING_TYPE,\n  DEFAULT_VARIABLE_NAME: DEFAULT_VARIABLE_NAME,\n  ECMA5_DOUBLE: ECMA5_DOUBLE,\n\n  // Functions\n  escapeBackslash: escapeBackslash,\n  escapeSpecialCharacters: escapeSpecialCharacters,\n  quote: quote,\n  initVariable: initVariable,\n  getStart: getStart,\n  getEnd: getEnd,\n  convertText: convertText,\n  clearField: clearField\n};\n},{}],2:[function(require,module,exports){\nconst stringConverter = require('./converter');\n\nwindow.convert = () => {\n  // Get input content\n  const text = document.getElementById(\"text\").value;\n\n  // Get the variable name, set default as \"text\"\n  const variableName = document.getElementById(\"variable-name\").value || \"\";\n\n  // Get the type of string wanted to be output\n  const stringType = document.getElementById(\"string-type\").value || stringConverter.ECMA5_DOUBLE;\n\n  // Get whether newlines are needed\n  const newlines = !document.getElementById(\"no-newline\").checked;\n\n  // Get whether white spacing needs to be trimmed\n  const trim = document.getElementById(\"trim-padding\").checked;\n\n  // Get whether a semi-colon should be used or not\n  const semiColon = !document.getElementById(\"no-semi-colon\").checked;\n\n  // Convert text\n  const converted = stringConverter.convertText(variableName, text, stringType, newlines, trim, semiColon);\n\n  // Write converted text to output box\n  document.getElementById(\"js-code\").value = converted;\n};\n\nwindow.clearAllFields = () => {\n  // Clear all fields\n  stringConverter.clearField(document.getElementById(\"text\"));\n  stringConverter.clearField(document.getElementById(\"js-code\"));\n  stringConverter.clearField(document.getElementById(\"variable-name\"), stringConverter.DEFAULT_VARIABLE_NAME);\n  stringConverter.clearField(document.getElementById(\"string-type\"), stringConverter.DEFAULT_STRING_TYPE);\n  document.getElementById('trim-padding').checked = false;\n  document.getElementById('no-newline').checked = false;\n  document.getElementById('no-semi-colon').checked = false;\n};\n\n},{\"./converter\":1}]},{},[2]);\n"]}